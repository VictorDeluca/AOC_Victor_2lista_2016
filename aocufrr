1) Processadores multiciclo dividem as instruções em passos, possibilitando que instruções mais curtas finalizem sua execução mais rapidamente ao evitar etapas desnecessárias. Além disso, possibilitam a implementação de pipelining, técnica que melhora ainda mais o seu desempenho.

2) Basta utilizar registradores de controle em cada seção do processador dedicada a uma etapa do pipelining. Esses registradores de controle servirão para armazenar os resultados da operação anterior e utilizá-los na próxima operação durante o próximo ciclo de clock.

3)
Loop: 
1- subi $t2,$t2,4
2- lw $t1,0($t2)
3- add $t3,$t1,$t4
4- add $t4,$t3,$t3
5- sw $t4,0($t2)
6- beq $t2,$0,loop

Abaixo é representado o funcionamento do processador a cada ciclo de clock

Ciclo 1: IF(Linha 1)
Ciclo 2: ID(Linha 1), IF(Linha 2)
Ciclo 3: EX(Linha 1), Stall(Linha 2) - A operação ID da Linha 3 depende do resultado da Linha 1
Ciclo 4: WB(Linha 1), Stall(Linha 2)
Ciclo 5: ID(Linha 2), IF(Linha 3)
Ciclo 6: EX(Linha 2), Stall(Linha 3) - A operação ID da Linha 3 depende do resultado da Linha 2
Ciclo 7: MEM(Linha 2), Stall(Linha 3)
Ciclo 8: WB(Linha 2), Stall(Linha 3)
Ciclo 9: ID(Linha 3), IF(Linha 4)


5)
1- div.d F1, F2, F3
2- sub.d F4, F5, F1 <= Dependência RAW em relação à linha 1 (Registrador F1)
3- s.d  F4, 4(F10) <= Dependência de saída WAW em relação à linha 2 (Registrador F4)
4- add.d F5, F6, F7 <= Antidependênciara WAR em relação à linha 2 (Registrador F5)
5- div.d F4, F5, F6 <= Dependência RAW em relação à linha 4 (Registrador F5)


Referências:
http://cmpe.emu.edu.tr/cergun/CMPE325/Key%20Differences%20between%20Datapaths.htm
https://www.cise.ufl.edu/~mssz/CompOrg/CDA-pipe.html
