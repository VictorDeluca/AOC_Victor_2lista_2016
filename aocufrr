1) Processadores multiciclo dividem as instruções em passos, possibilitando que instruções mais curtas finalizem sua execução mais rapidamente ao evitar etapas desnecessárias. Além disso, possibilitam a implementação de pipelining, técnica que melhora ainda mais o seu desempenho.

2) Basta utilizar registradores de controle em cada seção do processador dedicada a uma etapa do pipelining. Esses registradores de controle servirão para armazenar os resultados da operação anterior e utilizá-los na próxima operação durante o próximo ciclo de clock.

3)
Loop: 
1- subi $t2,$t2,4
2- lw $t1,0($t2)
3- add $t3,$t1,$t4
4- add $t4,$t3,$t3
5- sw $t4,0($t2)
6- beq $t2,$0,loop

Abaixo é representado o funcionamento do processador a cada ciclo de clock utilizando pipeline:

Ciclo 1: IF(Linha 1)
Ciclo 2: ID(Linha 1), IF(Linha 2)
Ciclo 3: EX(Linha 1), Stall(Linha 2) - Conflito de dados: A operação ID da Linha 3 depende do resultado da Linha 1
Ciclo 4: WB(Linha 1), Stall(Linha 2)
Ciclo 5: ID(Linha 2), IF(Linha 3)
Ciclo 6: EX(Linha 2), Stall(Linha 3) - Conflito de dados: A operação ID da Linha 3 depende do resultado da Linha 2
Ciclo 7: MEM(Linha 2), Stall(Linha 3)
Ciclo 8: WB(Linha 2), Stall(Linha 3)
Ciclo 9: ID(Linha 3), IF(Linha 4)
Ciclo 10: EX(Linha 3), Stall(Linha 4) - Conflito de dados: A operação ID da Linha 4 depende do resultado da Linha 3
Ciclo 11: WB(Linha 3), Stall(Linha 4)
Ciclo 12: ID(Linha 4), IF(Linha 5)
Ciclo 13: EX(Linha 4), ID(Linha 5)
Ciclo 14: WB(Linha 4), EX(Linha 5)
Ciclo 15: MEM(Linha 5), Stall(Linha 6) - Conflito estrutural: Não é possível que duas instruções acessem a memória ao mesmo tempo, portanto o IF da linha 6 terá de esperar um ciclo.
Ciclo 16: IF(Linha 6)
Ciclo 17: ID(Linha 6)
Ciclo 18: EX(Linha 6)

Um processador sem pipeline executaria da seguinte forma:
Linha 1: 4 ciclos (Instruções do tipo R não têm MEM)
Linha 2: 5 ciclos
Linha 3: 4 ciclos
Linha 4: 4 ciclos
Linha 5: 4 ciclos (A instrução SW não tem WB)
Linha 6: 3 ciclos (Instruções BEQ não têm MEM nem WB)
Total: 4+5+4+4+4+3=24

Logo, o speedup foi de 24/18 = 1,33 vezes


4) Abaixo é representado o funcionamento do processador com a técnica de bypassing e memória segmentada:

Ciclo 1: IF(Linha 1)
Ciclo 2: ID(Linha 1), IF(Linha 2)
Ciclo 3: EX(Linha 1), ID(Linha 2), IF(Linha 3) <= O resultado do EX na linha 1 alimentará o EX da linha 2 no próximo ciclo
Ciclo 4: WB(Linha 1), EX(Linha 2), ID(Linha 3), IF(Linha 4)
Ciclo 5: WB(Linha 2), EX(Linha 3), ID(Linha 4), IF(Linha 5)
Ciclo 6: WB(Linha 3), EX(Linha 4), ID(Linha 5), IF(Linha 6)
Ciclo 7: MEM(Linha 4), EX(Linha 5), ID(Linha 6)
Ciclo 8: WB(Linha 4), WB(Linha 5), EX(Linha 6)
Ciclo 9: WB(Linha 6) 



5)
1- div.d F1, F2, F3
2- sub.d F4, F5, F1 <= Dependência RAW em relação à linha 1 (Registrador F1)
3- s.d  F4, 4(F10) <= Dependência de saída WAW em relação à linha 2 (Registrador F4)
4- add.d F5, F6, F7 <= Antidependênciara WAR em relação à linha 2 (Registrador F5)
5- div.d F4, F5, F6 <= Dependência RAW em relação à linha 4 (Registrador F5)


Referências:
http://cmpe.emu.edu.tr/cergun/CMPE325/Key%20Differences%20between%20Datapaths.htm
https://www.cise.ufl.edu/~mssz/CompOrg/CDA-pipe.html
